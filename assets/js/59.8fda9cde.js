(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{308:function(t,e,a){"use strict";a.r(e);var v=a(28),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"git-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-简介"}},[t._v("#")]),t._v(" Git 简介")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git"),a("OutboundLink")],1),t._v(" 是目前世界上最先进的分布式版本控制系统。而 CVS 和 SVN 都是集中式的版本控制系统。")]),t._v(" "),a("p",[t._v("Linus 在 1991 年创建了开源的 Linux。")]),t._v(" "),a("p",[t._v("Git 跟踪并管理的是修改，而非文件。")]),t._v(" "),a("h3",{attrs:{id:"git-相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-相关概念"}},[t._v("#")]),t._v(" Git 相关概念")]),t._v(" "),a("p",[t._v("工作区：")]),t._v(" "),a("p",[t._v("版本库：又名仓库，英文名 repository")]),t._v(" "),a("p",[t._v("暂存区(stage 或 index)：")]),t._v(" "),a("p",[t._v("远程仓库：")]),t._v(" "),a("h3",{attrs:{id:"git-基础命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-基础命令"}},[t._v("#")]),t._v(" Git 基础命令")]),t._v(" "),a("p",[a("code",[t._v("git --version")])]),t._v(" "),a("p",[a("code",[t._v("git --help")])]),t._v(" "),a("p",[t._v("全局配置 git：")]),t._v(" "),a("p",[t._v('git config --global user.name "Your Name"')]),t._v(" "),a("p",[t._v('git config --global user.email "email@example.com"')]),t._v(" "),a("h5",{attrs:{id:"start-a-working-area"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-a-working-area"}},[t._v("#")]),t._v(" Start a working area")]),t._v(" "),a("p",[a("code",[t._v("git clone")]),t._v(" Clone a reponsitory into a new directory")]),t._v(" "),a("p",[a("code",[t._v("git init")]),t._v(" Create an empty Git repository or reinitialize an existing one")]),t._v(" "),a("h5",{attrs:{id:"work-on-the-current-change"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#work-on-the-current-change"}},[t._v("#")]),t._v(" work on the current change")]),t._v(" "),a("p",[a("code",[t._v("git add <filename>")]),t._v(" or "),a("code",[t._v("git add .")]),t._v(" 把要提交的所有修改放到暂存库(Stage)")]),t._v(" "),a("p",[a("code",[t._v("git mv")]),t._v(" Move or rename a file, a directory, or a symlink")]),t._v(" "),a("p",[a("code",[t._v("git reset")]),t._v(" Reset current HEAD to the specified state(git reset --hard commit_id)")]),t._v(" "),a("ul",[a("li",[t._v("git reset HEAD "),a("file",[t._v(" 把暂存区的修改撤销，重新放回工作区")])],1)]),t._v(" "),a("p",[a("code",[t._v("git rm")]),t._v(" Remove file from the working tree and from the index")]),t._v(" "),a("h5",{attrs:{id:"examine-the-history-and-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examine-the-history-and-state"}},[t._v("#")]),t._v(" examine the history and state")]),t._v(" "),a("p",[a("code",[t._v("git bisect")]),t._v(" Use binary search to find the commit that introduced a bug")]),t._v(" "),a("p",[t._v("grep")]),t._v(" "),a("p",[a("code",[t._v("git log")]),t._v(" Show commit logs")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git log --graph")]),t._v(" 查看分支合并图")]),t._v(" "),a("li",[t._v("git log -n 显示最近 n 次提交信息(n是正整数)")])]),t._v(" "),a("p",[a("code",[t._v("git show")]),t._v(" Show various types of objects")]),t._v(" "),a("p",[a("code",[t._v("git status")]),t._v(" Show the working tree status")]),t._v(" "),a("h5",{attrs:{id:"grow-mark-and-tweak-your-common-history"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grow-mark-and-tweak-your-common-history"}},[t._v("#")]),t._v(" grow, mark and tweak your common history")]),t._v(" "),a("p",[a("code",[t._v("git branch")])]),t._v(" "),a("p",[a("code",[t._v("git checkout")])]),t._v(" "),a("ul",[a("li",[t._v("git checkout -- <file_name> 撤销工作区的修改")])]),t._v(" "),a("p",[a("code",[t._v("git commit")]),t._v(" git commit -a "),a("comment",[t._v(" 把暂存区的修改提交到分支")])],1),t._v(" "),a("p",[a("code",[t._v("git diff")])]),t._v(" "),a("p",[a("code",[t._v("git merge")])]),t._v(" "),a("p",[a("code",[t._v("git rebase")])]),t._v(" "),a("p",[a("code",[t._v("git tag")])]),t._v(" "),a("h5",{attrs:{id:"collaborate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collaborate"}},[t._v("#")]),t._v(" collaborate")]),t._v(" "),a("p",[a("code",[t._v("git fetch")])]),t._v(" "),a("p",[a("code",[t._v("git pull")])]),t._v(" "),a("p",[a("code",[t._v("git push")]),t._v(" 推送到远程库")]),t._v(" "),a("p",[a("code",[t._v("git reflog")]),t._v(" 查看历史命令")]),t._v(" "),a("p",[a("code",[t._v("git revert")])]),t._v(" "),a("p",[a("code",[t._v("git shortlog")])]),t._v(" "),a("p",[a("code",[t._v("git remote")])]),t._v(" "),a("p",[t._v("git remote -v")]),t._v(" "),a("p",[t._v("git cherry-pick commit_id 复制特定提交到当前分支")]),t._v(" "),a("p",[t._v("建立本地分支和远程分支的关联，使用"),a("code",[t._v("git branch --set-upstream branch-name origin/branch-name")])]),t._v(" "),a("p",[a("code",[t._v("git help")])]),t._v(" "),a("p",[a("code",[t._v("git help -a")]),t._v(" and "),a("code",[t._v("git help -g")]),t._v(" list available subcommands and some concept guides.")]),t._v(" "),a("p",[a("code",[t._v("git help <command>")]),t._v(" or "),a("code",[t._v("git help <concept>")]),t._v(" to read about a specific subcommand or concept.")]),t._v(" "),a("p",[t._v("git help tutorial")]),t._v(" "),a("p",[t._v("git help everyday")]),t._v(" "),a("p",[t._v("git help revisions")]),t._v(" "),a("p",[t._v("git help workflows")]),t._v(" "),a("h5",{attrs:{id:"stash-stash-the-changes-in-a-dirty-working-directory-away"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stash-stash-the-changes-in-a-dirty-working-directory-away"}},[t._v("#")]),t._v(" stash Stash the changes in a dirty working directory away")]),t._v(" "),a("p",[t._v("git stash")]),t._v(" "),a("p",[t._v("git stash apply")]),t._v(" "),a("p",[t._v("git stash drop")]),t._v(" "),a("p",[t._v("git stash pop")]),t._v(" "),a("p",[t._v("git stash list")]),t._v(" "),a("h3",{attrs:{id:"远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),a("p",[a("code",[t._v("git remote add origin git@server-name:path/repo-name.git")]),t._v(" 关联远程库")]),t._v(" "),a("p",[a("code",[t._v("git push -u origin master")]),t._v(" 第一次推送 master 分支的所有内容")]),t._v(" "),a("p",[a("code",[t._v("git push origin master")]),t._v(" 推送最新修改")]),t._v(" "),a("h3",{attrs:{id:"分支管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),a("p",[t._v("查看分支："),a("code",[t._v("git branch")])]),t._v(" "),a("p",[t._v("创建分支："),a("code",[t._v("git branch")])]),t._v(" "),a("p",[t._v("切换分支："),a("code",[t._v("git checkout")]),t._v("或者"),a("code",[t._v("git switch")])]),t._v(" "),a("p",[t._v("创建+切换分支："),a("code",[t._v("git checkout -b")]),t._v("或者"),a("code",[t._v("git switch -c")])]),t._v(" "),a("p",[t._v("合并某分支到当前分支："),a("code",[t._v("git merge")]),t._v("(--no-ff 普通模式合并)")]),t._v(" "),a("p",[t._v("删除分支："),a("code",[t._v("git branch -d <name>")])]),t._v(" "),a("p",[t._v("强行删除一个没有合并过的分支: "),a("code",[t._v("git branch -D <branch_name>")])]),t._v(" "),a("h3",{attrs:{id:"标签管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签管理"}},[t._v("#")]),t._v(" 标签管理")]),t._v(" "),a("p",[t._v("git tag <tag_name> 针对最新提交的 commit 打一个新标签")]),t._v(" "),a("p",[t._v("git tag <tag_name> commit_id 针对某次提交打标签")]),t._v(" "),a("p",[t._v("git tag -a <tag_name> -m "),a("description",[t._v(" <commt_id>")])],1),t._v(" "),a("p",[t._v("git show <tag_name> 查看标签信息")]),t._v(" "),a("p",[t._v("git tag 查看所有标签")]),t._v(" "),a("p",[t._v("git tag -d <tag_name>")]),t._v(" "),a("p",[t._v("git push origin "),a("tagname",[t._v(" 推送某个标签到远程")])],1),t._v(" "),a("p",[t._v("git push origin --tags 一次性推送全部尚未推送到远程的本地标签")]),t._v(" "),a("p",[t._v("如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：")]),t._v(" "),a("ol",[a("li",[t._v("git tag -d "),a("tagname")],1),t._v(" "),a("li",[t._v("git push origin :refs/tags/"),a("tagname")],1)]),t._v(" "),a("div",{staticClass:"language-gitignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# .gitignore\n")])])]),a("h3",{attrs:{id:"配置别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置别名"}},[t._v("#")]),t._v(" 配置别名")]),t._v(" "),a("p",[t._v("git config --global alias.st status")])])}),[],!1,null,null,null);e.default=_.exports}}]);